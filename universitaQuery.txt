Dopo aver testato le vostre query con `phpMyAdmin`, riportatele in un file `txt` o `md` e caricatelo nella vostra repo.

### Query
1. Selezionare tutti gli studenti nati nel 1990 (160)
```sql
SELECT * 
FROM students 
WHERE YEAR(date_of_birth) = 1990;
```

2. Selezionare tutti i corsi che valgono più di 10 crediti (479)
```sql
SELECT * FROM courses WHERE cfu > 10;
```

3. Selezionare tutti gli studenti che hanno più di 30 anni
```sql
SELECT *
FROM students
WHERE TIMESTAMPDIFF(YEAR, date_of_birth, CURDATE()) > 30;

```

4. Selezionare tutti i corsi del primo semestre del primo anno di un qualsiasi corso di laurea (286)
```sql
SELECT * FROM courses WHERE period = 'I semestre' AND year = 1;
```

5. Selezionare tutti gli appelli d'esame che avvengono nel pomeriggio (dopo le 14) del 20/06/2020 (21)
```sql
SELECT * FROM exams WHERE date = '2020-06-20' AND hour >= '14:00';
```

6. Selezionare tutti i corsi di laurea magistrale (38)
```sql
SELECT * FROM degrees WHERE level LIKE 'magistrale';
```

7. Da quanti dipartimenti è composta l'università? (12)
```sql
SELECT COUNT(*) FROM departments;
```

8. Quanti sono gli insegnanti che non hanno un numero di telefono? (50)
```sql
SELECT COUNT(*) FROM teachers WHERE phone IS  NULL;
```




eserczio 1 febbraio 

### Query
#### Group by
1. Contare quanti iscritti ci sono stati ogni anno
```sql
SELECT YEAR(enrolment_date) , COUNT(*) AS Numero_Studenti 
FROM students 
GROUP BY YEAR(enrolment_date) 
ORDER BY YEAR(enrolment_date);
```

2. Contare gli insegnanti che hanno l'ufficio nello stesso edificio
```sql
SELECT office_address, COUNT(*) AS Numero_insegnante
FROM teachers 
GROUP BY office_address HAVING COUNT(*) > 1 
ORDER BY COUNT(*) DESC;
```

3. Calcolare la media dei voti di ogni appello d'esame (dell'esame vogliamo solo l'`id`)
```sql
SELECT exam_id, AVG(vote) AS Media_Voti 
FROM exam_student 
WHERE vote > 0 
GROUP BY exam_id;
```

4. Contare quanti corsi di laurea ci sono per ogni dipartimento
```sql
SELECT d.name AS Nome_Dipartimento, COUNT(*) AS Numero_Di_Dipartimento 
FROM departments AS d 
JOIN degrees AS deg ON d.id = deg.department_id 
GROUP BY d.id, d.name 
ORDER BY COUNT(*) DESC;
```


#### Join
1. Selezionare tutti gli studenti iscritti al Corso di Laurea in Economia
```sql
SELECT students.* 
FROM degrees 
	JOIN students 
    	ON degrees.id = students.degree_id 
WHERE degrees.name LIKE 'corso di Laurea in Economia';

```

2. Selezionare tutti i Corsi di Laurea Magistrale del Dipartimento di Neuroscienze
```sql
SELECT deg.* 
FROM degrees AS deg 
INNER JOIN departments AS dipartimento ON department_id = dipartimento.id 
WHERE dipartiments.name LIKE 'Dipartimento di Neuroscienze'
	AND degrees.level LIKE 'magistrale';

```

3. Selezionare tutti i corsi in cui insegna Fulvio Amato (id=44)
```sql
SELECT DISTINCT courses.* 
FROM courses  
JOIN course_teacher 
ON teachers.id = courses_teacher.teacher_id 
JOIN courses  ON courses_teacher.courses_id = courses.id 
WHERE teachers.id = 44;
```

4. Selezionare tutti gli studenti con i dati relativi al corso di laurea a cui sono iscritti e il relativo dipartimento, in ordine alfabetico per cognome e nome
```sql
SELECT students.name, students.surname, departments.*, degrees.*teachers
FROM departments
	JOIN degrees
    	ON departments.id = degrees.department_id
    JOIN students
    	ON degrees.id = degrees.department_id
 ORDER BY students.surname, students.name;
```

5. Selezionare tutti i corsi di laurea con i relativi corsi e insegnanti
```sql
SELECT degrees.name, courses.*, teachers.*
FROM degrees
	JOIN courses
    	ON degrees.id = courses.degree_id
    JOIN course_teacher
    	ON courses.id = course_teacher.course_id
    JOIN teachers
    	ON course_teacher.teacher_id = teachers.id;
```

6. Selezionare tutti i docenti che insegnano nel Dipartimento di Matematica (54)
```sql
SELECT teachers.*
FROM degrees
	JOIN courses
    	ON degrees.id = courses.degree_id
    JOIN course_teacher
    	ON courses.id =  course_teacher.course_id
    JOIN teachers
    	ON course_teacher.teacher_id = teachers.id
    JOIN departments
    	ON degrees.department_id = departments.id
WHERE departments.name LIKE 'Diprtimento di Matematica';
```


##### Bonus
7. Selezionare per ogni studente il numero di tentativi sostenuti per ogni esame, stampando anche il voto massimo. Successivamente, filtrare i tentativi con voto minimo 18.
```sql

```